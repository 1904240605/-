/*
Fibonacci数是非常有名的一个数列,它的公式为 f(n)=f(n-1)+f(n-2),f(0)=1,f(1)=2。 
我们可以把任意一个数x表示成若干不相同的Fibonacci数的和， 比如说14 = 13+1 = 8+5+1 = 8+3+2+1。
如果把Fibonacci数列作为数的位权，即f(i)作为第i位的位权，每位的系数只能是0或者1，从而得到一个01串。
比如14可以表示成 100001，11001，10111。 我们再把这个01串看成2进制，再转成10进制以后就变成了 33，
25，23。 为了避免歧义，我们将使用最小的那个值23。
请按照这个过程计算一下10进制整数通过上述转换过程得到的10进制整数。
输入描述:
第一行是一个整数T(1 ≤ T ≤ 10000)，表示样例的个数。
以后每行一个样例，为一个十进制正整数x(1 ≤ x ≤ 109)。
输出描述:
每行输出一个样例的结果。
*/ 
/*思路：最小的肯定是从最小的加起，所以求出前n项和*/
#include<bits/stdc++.h>
#define ll long long
using namespace std;
const int M=40+7;
ll s[M],a[M];
int main()
{
	int t,i,n;
	cin>>t;
	for(a[0]=1,a[1]=2,i=2;i<M;i++)
	a[i]=a[i-1]+a[i-2];
	for(s[0]=1,i=1;i<M;i++)
	s[i]=s[i-1]+a[i];
	while(t--)
	{
		cin>>n;
		ll k=1,g=0,d=0;
		for(i=M-1;i>=0;i--)
		{
			bool f=0;
			if(n>s[i-1])//必不可少，必须要取 
			{
				n-=a[i];
				g=1,f=1;
			}
			if(g) d=f==0?d*2:d*2+1;//求10进制数 
		}
		cout<<d<<endl;
	}
	return 0;
}
